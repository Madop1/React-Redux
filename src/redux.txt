UI is the user who send the request/response which he needs.
in this example UI send requests to Deposit and Withdraw whenever needed.
So we call an action creator function...This action creator function will create an action which takes two information 1-action.Type 2-action.payload
after action the action is getting dispatched to the reducer which sets the state in the store.

what is Redux?
Redux is a predictable state conatiner for JS apps.


installation:
redux and react-redux

Learning Redux:
3 core concepts - 
Store - holds the state of application.(Shop keeping cake)
action - describes what happened.(Intention(action) to buy a cake) action tells cake reduced by 1qty
reducer - ties the store and actions together.(shopkeeper action by customer and removes the cake from shelf ie; store)

entities -
shop - stores cake on a shelf
shopkeeper - at the front of store
customer - at store enterance

activities -
customer - buy a cake
shopkeeper - remove a cake from shelf

Fundamental principles of redux : 
all of your states stored in single object
simple object that contains type property indicating your Intention
to update state of your application write pure reducers



Action:
const BUY_CAKE ='BUY_CAKE';
conct BUY_ICECREAM = 'BUY_ICECREAM';

fucntion buyCake(){
    return {
    type: BUY_CAKE,
    info:'First redux action',
}
}

function buyIceCream(){
    return{
        type:BUY_ICECREAM,
    }
}
action is an object with type property
actionCreator is a function that returns action


Reducers:

const initialState = {
    numOfCakes :10,
    numOfIceCreams :20
}

const initialCakeState={
    numOfCakes :10;
}

const initialIceCreamState ={
    numOfIceCreams :20;
}

const cakeReducer = (state = initialCakeState,action) =>{
    switch(action.type){
        case BUY_CAKE:
        return{
            ...state,(make a copy and then update no of cakes)
            numOfCakes: state.numOfCakes - 1
        }
        default : return state
    }
}
const iceCreamReducer = (state = initialIceCreamState,action) =>{
    switch(action.type){
        case BUY_ICECREAM:
        return{
            ...state,(make a copy and then update no of iceCreams)
            numOfIceCreams: state.numOfIceCreams - 1
        }
        default : return state
    }
}

Reducers is a purefunction that accepts state and action as arguments and returns next state of application

Redux Store:
const rootReducer =combineReducers({
    cake: cakeReducer,
    iceCream: iceCreamReducer
})
const createStore = redux.createStore;

const store = createStore(rootReducer,applyMiddleware(logger))

Middleware: 
Middleware for logging, crash reporting ,performing asynchronous tasks etc.
redux-logger
const logger = reduxLogger.createLogger()
const applyMiddleware = redux.applyMiddleware


asynchronous actions:
state{
    loading:true,
    data:[],
    error:''
},
actions
FETCH_USERS_REQUEST - fetch list of users
FETCH_USERS_SUCCESS - fetched sucessfully
FETCH_USERS_FAILURE - error fetching data

,reducers
case: FETCH_USERS_REQUEST
    loading:true
case: FETCH_USERS_SUCCESS
    loading:false
    users: data(from api)
case : FETCH_USERS_FAILURE
    loading:false
    error:error(from api)


//code//
const redux= require('redux')
const createStore=redux.createStore;
const applyMiddleware=redux.applyMiddleware;
const thunkMiddleware = require('redux-thunk').default
const axios= require('axios')

const initialState={
    loading:false,
    users:[],
    error:''
}

const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'
const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'
const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'

const fetchUsersRequest =() =>{
    return{
        type:FETCH_USERS_REQUEST
    }
}

const fetchUsersSucces =() =>{
    return {
        type:FETCH_USERS_SUCCESS,
        payload:users
    }
}

const fetchUsersFailure = () =>{
    return {
        type:FETCH_USERS_FAILURE,
        payload:error
    }
}

const reducer= (state = initialState,action) =>{
    switch(action.type){
        case : FETCH_USERS_REQUEST
        return{
            ...state,
            laoding:true
        }
        case : FETCH_USERS_SUCCESS
        return{
            loading:false,
            users:action.payload,
            error:""
        }
        case : FETCH_USERS_FAILURE
        return{
            loading: false,
            users:[],
            error:action.payload
        }
    }
}

const fetchUsers = () =>{
    return function(dispatch){
        dispatch(fetchUsersRequest)
        axios.get('url')
        .then(response => {
           const users response.data.map(user => user.id)
           dispatch (fetchUsersSucces(users))
        })
        .catch(error => {
            dispatch(fetchUsersFailure(error.message))
        })
    }
}


const store=createStore(reducer,applyMiddleware(thunkMiddleware))